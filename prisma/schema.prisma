generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model model_has_permissions {
  permission_id BigInt
  model_type    String      @db.VarChar(255)
  model_id      BigInt
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "model_has_permissions_permission_id_foreign")

  @@id([permission_id, model_id, model_type])
  @@index([model_id, model_type], map: "model_has_permissions_model_id_model_type_index")
}

model model_has_roles {
  role_id    BigInt
  model_type String @db.VarChar(255)
  model_id   BigInt
  roles      roles  @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "model_has_roles_role_id_foreign")

  @@id([role_id, model_id, model_type])
  @@index([model_id, model_type], map: "model_has_roles_model_id_model_type_index")
}

model permissions {
  id                    BigInt                  @id @default(autoincrement())
  name                  String                  @db.VarChar(255)
  guard_name            String                  @db.VarChar(255)
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  model_has_permissions model_has_permissions[]
  role_has_permissions  role_has_permissions[]

  @@unique([name, guard_name], map: "permissions_name_guard_name_unique")
}

model role_has_permissions {
  permission_id BigInt
  role_id       BigInt
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_has_permissions_permission_id_foreign")
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_has_permissions_role_id_foreign")

  @@id([permission_id, role_id])
}

model roles {
  id                   BigInt                 @id @default(autoincrement())
  name                 String                 @db.VarChar(255)
  guard_name           String                 @db.VarChar(255)
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  model_has_roles      model_has_roles[]
  role_has_permissions role_has_permissions[]

  @@unique([name, guard_name], map: "roles_name_guard_name_unique")
}

model users {
  id                                                 Int                      @id @default(autoincrement())
  name                                               String                   @db.VarChar(255)
  email                                              String                   @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at                                  DateTime?                @db.Timestamp(0)
  password                                           String                   @db.VarChar(255)
  remember_token                                     String?                  @db.VarChar(100)
  created_at                                         DateTime?                @db.Timestamp(0)
  updated_at                                         DateTime?                @db.Timestamp(0)
  deleted_at                                         DateTime?                @db.Timestamp(0)
  tokens                                             tokens?
}

model tokens {
  id          Int       @id @default(autoincrement())
  user_id     Int       @unique(map: "tokens_user_id_unique")
  token       String
  type        String    @db.VarChar(255)
  expires     DateTime  @db.Date
  blacklisted Boolean   @default(false)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "tokens_user_id_foreign")
}